<?xml version="1.0"?>
<root>
    <appdef>
        <appname>idea</appname>
        <equal>com.jetbrains.intellij</equal>
    </appdef>

    <inputsourcedef>
        <name>ABC</name>
        <inputsourceid_prefix>com.apple.keylayout.ABC</inputsourceid_prefix>
    </inputsourcedef>

    <inputsourcedef>
        <name>BAIDUPINYIN</name>
        <inputsourceid_prefix>com.baidu.inputmethod.BaiduIM.pinyin</inputsourceid_prefix>
    </inputsourcedef>

    <item>
        <name>Change F19 Key</name>
        <appendix>(根据中英文，映射也不同)</appendix>

        <item>
            <name>在中文状态下，F19 键短按映射为 ESC，并切换到英文输入法；与其他键组合映射为 COMMAND_R + OPTION_R + SHIFT_R + CONTROL_R 键</name>
            <identifier>private.__keyoverlaidmodifier__f19.pinyin</identifier>
            <inputsource_only>BAIDUPINYIN</inputsource_only>

            <autogen>
                __KeyOverlaidModifier__
                KeyCode::F19,
                @begin
                KeyCode::COMMAND_R, ModifierFlag::OPTION_R | ModifierFlag::SHIFT_R | ModifierFlag::CONTROL_R | ModifierFlag::NONE,
                @end

                @begin
                KeyCode::ESCAPE,
                KeyCode::SPACE, ModifierFlag::CONTROL_L | ModifierFlag::OPTION_L,
                @end
            </autogen>
        </item>

        <item>
            <name>在英文状态下，F19 键短按映射为 ESC；与其他键组合映射为 COMMAND_R + OPTION_R + SHIFT_R + CONTROL_R 键</name>
            <identifier>private.__keyoverlaidmodifier__f19.abc</identifier>
            <inputsource_only>ABC</inputsource_only>

            <autogen>
                __KeyOverlaidModifier__
                KeyCode::F19,
                @begin
                KeyCode::COMMAND_R, ModifierFlag::OPTION_R | ModifierFlag::SHIFT_R | ModifierFlag::CONTROL_R | ModifierFlag::NONE,
                @end

                @begin
                KeyCode::ESCAPE,
                @end
            </autogen>
        </item>
    </item>

    <item>
        <name>Change Tab Key</name>
        <item>
            <name>Tab 映射为 Option_R 键</name>
            <identifier>private.__keyoverlaidmodifier__tab</identifier>
            <autogen>
                __KeyOverlaidModifier__
                KeyCode::TAB,
                KeyCode::OPTION_R,
                KeyCode::TAB,
            </autogen>
        </item>
    </item>

    <item>
        <name>Change Control_L Key</name>
        <item>
            <name>Control_L 映射为 Alfred 开启键</name>
            <identifier>private.__keyoverlaidmodifier__control_l</identifier>
            <autogen>
                __KeyToKey__
                KeyCode::CONTROL_L,
                KeyCode::R, ModifierFlag::COMMAND_R | ModifierFlag::OPTION_R | ModifierFlag::SHIFT_R | ModifierFlag::CONTROL_R | ModifierFlag::NONE,
            </autogen>
        </item>
    </item>

    <item>
        <name>Change Shift_L Key</name>
        <item>
            <name>Shift 映射为切换输入法</name>
            <identifier>private.switch.input.source</identifier>

            <!-- Shift_L 键短按映射为 切换输入法；与其他键组合映射为 Shift 键 -->
            <autogen>
                __KeyOverlaidModifier__
                KeyCode::SHIFT_L,
                KeyCode::SHIFT_L,
                KeyCode::SPACE, ModifierFlag::CONTROL_L | ModifierFlag::OPTION_L,
            </autogen>
        </item>
    </item>

    <item>
        <name>Change Space Key</name>
        <item>
            <name>Space 映射为 Fn</name>
            <identifier>private.keyoverlaidmodifier.space</identifier>

            <autogen>
                __KeyOverlaidModifier__
                KeyCode::SPACE,
                KeyCode::FN,
                KeyCode::SPACE
            </autogen>
        </item>
    </item>

    <item>
        <name>Change Home Row to Command, Option, Control</name>
        <item>
            <name>Home Row 映射为控制键</name>
            <identifier>private.remap.__holdingkeytokey__command_option_control</identifier>

            <appendix>(J to Command)</appendix>
            <appendix>(K to Option + Command)</appendix>
            <appendix>(L to Shift + Command)</appendix>
            <appendix>(; to Control)</appendix>


            <appendix>(F to Command)</appendix>
            <appendix>(D to Option + Command)</appendix>
            <appendix>(S to Shift + Command)</appendix>
            <appendix>(A to Control)</appendix>

            <autogen>__HoldingKeyToKey__ KeyCode::J, ModifierFlag::NONE, KeyCode::J, KeyCode::VK_NONE, KeyCode::COMMAND_L</autogen>
            <autogen>__HoldingKeyToKey__ KeyCode::K, ModifierFlag::NONE, KeyCode::K, KeyCode::VK_NONE, KeyCode::COMMAND_L | ModifierFlag::OPTION_L</autogen>
            <autogen>__HoldingKeyToKey__ KeyCode::L, ModifierFlag::NONE, KeyCode::L, KeyCode::VK_NONE, KeyCode::COMMAND_L | ModifierFlag::SHIFT_L</autogen>
            <autogen>__HoldingKeyToKey__ KeyCode::SEMICOLON, ModifierFlag::NONE, KeyCode::SEMICOLON, KeyCode::VK_NONE, KeyCode::CONTROL_L</autogen>

            <autogen>__HoldingKeyToKey__ KeyCode::F, ModifierFlag::NONE, KeyCode::F, KeyCode::VK_NONE, KeyCode::COMMAND_L</autogen>
            <autogen>__HoldingKeyToKey__ KeyCode::D, ModifierFlag::NONE, KeyCode::D, KeyCode::VK_NONE, KeyCode::COMMAND_L | ModifierFlag::OPTION_L</autogen>
            <autogen>__HoldingKeyToKey__ KeyCode::S, ModifierFlag::NONE, KeyCode::S, KeyCode::VK_NONE, KeyCode::COMMAND_L | ModifierFlag::SHIFT_L</autogen>
            <autogen>__HoldingKeyToKey__ KeyCode::A, ModifierFlag::NONE, KeyCode::A, KeyCode::VK_NONE, KeyCode::CONTROL_L</autogen>
        </item>
    </item>

    <item>
        <name>Change Fn Key For Each App</name>
        <item>
            <identifier>private.remap.__keytokey__idea__fn</identifier>
            <name>为idea定制FN组合键</name>

            <!-- Complete statement -->
            <autogen>
                __KeyToKey__
                KeyCode::A, ModifierFlag::FN,
                KeyCode::RETURN, ModifierFlag::COMMAND_L | ModifierFlag::SHIFT_L,
            </autogen>

            <!-- Comment/uncomment with block comment -->
            <autogen>
                __KeyToKey__
                KeyCode::B, ModifierFlag::FN,
                KeyCode::SLASH, ModifierFlag::COMMAND_L | ModifierFlag::OPTION_L,
            </autogen>

            <!-- Comment/uncomment with line comment -->
            <autogen>
                __KeyToKey__
                KeyCode::C, ModifierFlag::FN,
                KeyCode::SLASH, ModifierFlag::COMMAND_L,
            </autogen>

            <autogen>
                __KeyToKey__
                KeyCode::E, ModifierFlag::FN,
                KeyCode::ESCAPE, ModifierFlag::SHIFT_L,
            </autogen>

            <autogen>
                __KeyToKey__
                KeyCode::T, ModifierFlag::FN,
                KeyCode::F12, ModifierFlag::OPTION_L,
            </autogen>

            <autogen>
                __KeyToKey__
                KeyCode::V, ModifierFlag::FN,
                KeyCode::9, ModifierFlag::COMMAND_L,
            </autogen>

            <autogen>
                __KeyToKey__
                KeyCode::P, ModifierFlag::FN,
                KeyCode::1, ModifierFlag::COMMAND_L,
            </autogen>

            <autogen>
                __KeyToKey__
                KeyCode::S, ModifierFlag::FN,
                KeyCode::7, ModifierFlag::COMMAND_L,
            </autogen>
        </item>
    </item>

    <item>
        <name>Change F19 Key</name>
        <item>
            <identifier>private.remap.__keytokey__f19</identifier>
            <name>重新映射 F19 和 其他键的组合</name>
            <appendix>(CapsLock + Q: 根据不同的APP实现不同的功能)</appendix>
            <appendix>(CapsLock + W: 选中光标所在位置单词)</appendix>
            <appendix>(CapsLock + E: 移至行尾)</appendix>
            <appendix>(CapsLock + R: Alfred)</appendix>
            <appendix>(CapsLock + T: iTerm2)</appendix>

            <appendix>(CapsLock + A: 移至行首)</appendix>
            <appendix>(CapsLock + S: )</appendix>
            <appendix>(CapsLock + D: DELETE)</appendix>
            <appendix>(CapsLock + F: CURSOR_RIGHT)</appendix>
            <appendix>(CapsLock + G: Go to File or Folder)</appendix>

            <appendix>(CapsLock + V: Paste)</appendix>
            <appendix>(CapsLock + B: CURSOR_LEFT)</appendix>

            <appendix>(CapsLock + Y: Context App)</appendix>
            <appendix>(CapsLock + U: 删除至行首)</appendix>
            <appendix>(CapsLock + I: Go to URI)</appendix>
            <appendix>(CapsLock + O: Context App</appendix>
            <appendix>(CapsLock + P: CURSOR_UP)</appendix>

            <appendix>(CapsLock + H: BACKSPACE)</appendix>
            <appendix>(CapsLock + J: 截图)</appendix>
            <appendix>(CapsLock + K: 删除至行尾)</appendix>
            <appendix>(CapsLock + L: 选中光标所在行)</appendix>

            <appendix>(CapsLock + N: CURSOR_NEXT)</appendix>
            <appendix>(CapsLock + M: RETURN)</appendix>
            <appendix>(CapsLock + ,: Prev Tab)</appendix>
            <appendix>(CapsLock + .: Next Tab)</appendix>

            <!-- CapsLock + W: 选中光标所在位置单词 -->
            <autogen>
                __KeyToKey__
                KeyCode::W, ModifierFlag::COMMAND_R | ModifierFlag::OPTION_R | ModifierFlag::SHIFT_R | ModifierFlag::CONTROL_R | ModifierFlag::NONE,
                KeyCode::CURSOR_LEFT, ModifierFlag::OPTION_L,
                KeyCode::CURSOR_RIGHT, ModifierFlag::OPTION_L, ModifierFlag::SHIFT_L,
            </autogen>

            <!-- CapsLock + E: 移至行或段落的末尾 -->
            <autogen>
                __KeyToKey__
                KeyCode::E, ModifierFlag::COMMAND_R | ModifierFlag::OPTION_R | ModifierFlag::SHIFT_R | ModifierFlag::CONTROL_R | ModifierFlag::NONE,
                KeyCode::CURSOR_RIGHT, ModifierFlag::COMMAND_L,
            </autogen>

            <!-- CapsLock + Shift + E: 选中插入点与当前行行尾之间的文本 -->
            <autogen>
                __KeyToKey__
                KeyCode::E, ModifierFlag::COMMAND_R | ModifierFlag::OPTION_R | ModifierFlag::SHIFT_R | ModifierFlag::CONTROL_R | ModifierFlag::SHIFT_L | ModifierFlag::NONE,
                KeyCode::CURSOR_RIGHT, ModifierFlag::SHIFT_L, ModifierFlag::COMMAND_L,
            </autogen>

            <!-- CapsLock + Option + E: 将插入点移至下一字词的词尾 -->
            <autogen>
                __KeyToKey__
                KeyCode::E, ModifierFlag::COMMAND_R | ModifierFlag::OPTION_R | ModifierFlag::SHIFT_R | ModifierFlag::CONTROL_R | ModifierFlag::OPTION_L | ModifierFlag::NONE,
                KeyCode::CURSOR_RIGHT, ModifierFlag::OPTION_L,
            </autogen>

            <!-- CapsLock + A: 移至行或段落的开头 -->
            <autogen>
                __KeyToKey__
                KeyCode::A, ModifierFlag::COMMAND_R | ModifierFlag::OPTION_R | ModifierFlag::SHIFT_R | ModifierFlag::CONTROL_R | ModifierFlag::NONE,
                KeyCode::CURSOR_LEFT, ModifierFlag::COMMAND_L,
            </autogen>

            <!-- CapsLock + Shift + A: 选中插入点与当前行行首之间的文本 -->
            <autogen>
                __KeyToKey__
                KeyCode::A, ModifierFlag::COMMAND_R, ModifierFlag::OPTION_R | ModifierFlag::SHIFT_R | ModifierFlag::CONTROL_R | ModifierFlag::SHIFT_L | ModifierFlag::NONE,
                KeyCode::CURSOR_LEFT, ModifierFlag::SHIFT_L, ModifierFlag::COMMAND_L,
            </autogen>

            <!-- CapsLock + Option + A: 将插入点移至上一字词的词首 -->
            <autogen>
                __KeyToKey__
                KeyCode::A, ModifierFlag::COMMAND_R, ModifierFlag::OPTION_R | ModifierFlag::SHIFT_R | ModifierFlag::CONTROL_R | ModifierFlag::OPTION_L | ModifierFlag::NONE,
                KeyCode::CURSOR_LEFT, ModifierFlag::OPTION_L,
            </autogen>

            <!-- CapsLock + S: 向前翻页  -->
            <autogen>
                __KeyToKey__
                KeyCode::S, ModifierFlag::COMMAND_R | ModifierFlag::OPTION_R | ModifierFlag::SHIFT_R | ModifierFlag::CONTROL_R | ModifierFlag::NONE,
                KeyCode::PAGEDOWN,
            </autogen>

            <!-- CapsLock + Option + S: 向后翻页  -->
            <autogen>
                __KeyToKey__
                KeyCode::S, ModifierFlag::COMMAND_R, ModifierFlag::OPTION_R | ModifierFlag::SHIFT_R | ModifierFlag::CONTROL_R | ModifierFlag::OPTION_L | ModifierFlag::NONE,
                KeyCode::PAGEUP,
            </autogen>

            <!-- CapsLock + D: 删除插入点右边的字符 -->
            <autogen>
                __KeyToKey__
                KeyCode::D, ModifierFlag::COMMAND_R | ModifierFlag::OPTION_R | ModifierFlag::SHIFT_R | ModifierFlag::CONTROL_R | ModifierFlag::NONE,
                KeyCode::DELETE, ModifierFlag::FN,
            </autogen>

            <!-- CapsLock + F: 向前移动一个字符 -->
            <autogen>
                __KeyToKey__
                KeyCode::F, ModifierFlag::COMMAND_R | ModifierFlag::OPTION_R | ModifierFlag::SHIFT_R | ModifierFlag::CONTROL_R | ModifierFlag::NONE,
                KeyCode::CURSOR_RIGHT,
            </autogen>

            <!-- CapsLock + Shift + F: 将文本选择范围向右扩展一个字符 -->
            <autogen>
                __KeyToKey__
                KeyCode::F, ModifierFlag::COMMAND_R, ModifierFlag::OPTION_R | ModifierFlag::SHIFT_R | ModifierFlag::CONTROL_R | ModifierFlag::SHIFT_L | ModifierFlag::NONE,
                KeyCode::CURSOR_RIGHT, ModifierFlag::SHIFT_L,
            </autogen>

            <!-- CapsLock + G: @Keyboard Maestro -->

            <!-- CapsLock + V: @Paste  -->

            <!-- CapsLock + B: 向后移动一个字符 -->
            <autogen>
                __KeyToKey__
                KeyCode::B, ModifierFlag::COMMAND_R | ModifierFlag::OPTION_R | ModifierFlag::SHIFT_R | ModifierFlag::CONTROL_R | ModifierFlag::NONE,
                KeyCode::CURSOR_LEFT,
            </autogen>

            <!-- CapsLock + Shift + B: 将文本选择范围向左扩展一个字符 -->
            <autogen>
                __KeyToKey__
                KeyCode::B, ModifierFlag::COMMAND_R, ModifierFlag::OPTION_R | ModifierFlag::SHIFT_R | ModifierFlag::CONTROL_R | ModifierFlag::SHIFT_L | ModifierFlag::NONE,
                KeyCode::CURSOR_LEFT, ModifierFlag::SHIFT_L,
            </autogen>

            <autogen>
                __KeyToKey__
                KeyCode::Y, ModifierFlag::COMMAND_R | ModifierFlag::OPTION_R | ModifierFlag::SHIFT_R | ModifierFlag::CONTROL_R | ModifierFlag::NONE,
                KeyCode::BACKQUOTE, ModifierFlag::COMMAND_L
            </autogen>

            <!-- CapsLock + U: 删除插入点与行或段落开头处之间的文本 -->
            <autogen>
                __KeyToKey__
                KeyCode::U, ModifierFlag::COMMAND_R | ModifierFlag::OPTION_R | ModifierFlag::SHIFT_R | ModifierFlag::CONTROL_R | ModifierFlag::NONE,
                KeyCode::CURSOR_LEFT | ModifierFlag::SHIFT_L | ModifierFlag::COMMAND_L,
                KeyCode::DELETE,
            </autogen>

            <!-- CapsLock + I: @Keyboard Maestro -->
            <!-- CapsLock + O: 激活 Context -->
            <!-- CapsLock + P: 上移一行 -->
            <autogen>
                __KeyToKey__
                KeyCode::P, ModifierFlag::COMMAND_R | ModifierFlag::OPTION_R | ModifierFlag::SHIFT_R | ModifierFlag::CONTROL_R | ModifierFlag::NONE,
                KeyCode::CURSOR_UP,
            </autogen>

            <!-- CapsLock + Shift + P: 将文本选择范围扩展到上一行相同水平位置的最近字符处 -->
            <autogen>
                __KeyToKey__
                KeyCode::P, ModifierFlag::COMMAND_R, ModifierFlag::OPTION_R | ModifierFlag::SHIFT_R | ModifierFlag::CONTROL_R | ModifierFlag::SHIFT_L | ModifierFlag::NONE,
                KeyCode::CURSOR_UP, ModifierFlag::SHIFT_L,
            </autogen>

            <!-- CapsLock + [: @Spectacle -->
            <!-- CapsLock + ]: @Spectacle -->
            <!-- CapsLock + \: Toggle 鼠标自动取词 @欧陆词典 -->
            <!-- CapsLock + H: 删除插入点左边的字符 -->
            <autogen>
                __KeyToKey__
                KeyCode::H, ModifierFlag::COMMAND_R | ModifierFlag::OPTION_R | ModifierFlag::SHIFT_R | ModifierFlag::CONTROL_R | ModifierFlag::NONE,
                KeyCode::DELETE,
            </autogen>

            <!-- CapsLock + Option + H: 删除插入点左边的字词 -->
            <autogen>
                __KeyToKey__
                KeyCode::H, ModifierFlag::COMMAND_R, ModifierFlag::OPTION_R | ModifierFlag::SHIFT_R | ModifierFlag::CONTROL_R | ModifierFlag::OPTION_L | ModifierFlag::NONE,
                KeyCode::DELETE, ModifierFlag::OPTION_L,
            </autogen>

            <!-- CapsLock + J: 截图 -->
            <autogen>
                __KeyToKey__
                KeyCode::J, ModifierFlag::COMMAND_R | ModifierFlag::OPTION_R | ModifierFlag::SHIFT_R | ModifierFlag::CONTROL_R | ModifierFlag::NONE,
                KeyCode::4, ModifierFlag::CONTROL_L, ModifierFlag::COMMAND_L, ModifierFlag::SHIFT_L,
            </autogen>

            <!-- CapsLock + K: 删除插入点与行或段落末尾处之间的文本 -->
            <autogen>
                __KeyToKey__
                KeyCode::K, ModifierFlag::COMMAND_R | ModifierFlag::OPTION_R | ModifierFlag::SHIFT_R | ModifierFlag::CONTROL_R | ModifierFlag::NONE,
                KeyCode::K, ModifierFlag::CONTROL_L,
            </autogen>

            <!-- CapsLock + L: 选中当前行 -->
            <autogen>
                __KeyToKey__
                KeyCode::L, ModifierFlag::COMMAND_R | ModifierFlag::OPTION_R | ModifierFlag::SHIFT_R | ModifierFlag::CONTROL_R | ModifierFlag::NONE,
                KeyCode::CURSOR_LEFT, ModifierFlag::COMMAND_L,
                KeyCode::CURSOR_RIGHT, ModifierFlag::SHIFT_L | ModifierFlag::COMMAND_L,
            </autogen>

            <!-- CapsLock + N: 下移一行 -->
            <autogen>
                __KeyToKey__
                KeyCode::N, ModifierFlag::COMMAND_R | ModifierFlag::OPTION_R | ModifierFlag::SHIFT_R | ModifierFlag::CONTROL_R | ModifierFlag::NONE,
                KeyCode::CURSOR_DOWN,
            </autogen>

            <!-- cAPSlock + Shift + N: 将文本选择范围扩展到下一行相同水平位置的最近字符处 -->
            <autogen>
                __KeyToKey__
                KeyCode::N, ModifierFlag::COMMAND_R, ModifierFlag::OPTION_R | ModifierFlag::SHIFT_R | ModifierFlag::CONTROL_R | ModifierFlag::SHIFT_L | ModifierFlag::NONE,
                KeyCode::CURSOR_DOWN, ModifierFlag::SHIFT_L,
            </autogen>

            <!-- CapsLock + M: Return -->
            <autogen>
                __KeyToKey__
                KeyCode::M, ModifierFlag::COMMAND_R | ModifierFlag::OPTION_R | ModifierFlag::SHIFT_R | ModifierFlag::CONTROL_R | ModifierFlag::NONE,
                KeyCode::RETURN,
            </autogen>

            <!-- CapsLock + ,: 上一个标签页 -->
            <autogen>
                __KeyToKey__
                KeyCode::COMMA, ModifierFlag::COMMAND_R | ModifierFlag::OPTION_R | ModifierFlag::SHIFT_R | ModifierFlag::CONTROL_R | ModifierFlag::NONE,
                KeyCode::PAGEUP, ModifierFlag::CONTROL_L,
            </autogen>

            <!-- CapsLock + .: 下一个标签页 -->
            <autogen>
                __KeyToKey__
                KeyCode::DOT, ModifierFlag::COMMAND_R | ModifierFlag::OPTION_R | ModifierFlag::SHIFT_R | ModifierFlag::CONTROL_R | ModifierFlag::NONE,
                KeyCode::PAGEDOWN, ModifierFlag::CONTROL_L,
            </autogen>
        </item>
    </item>
</root>

