set runtimepath+=/Users/Jms/Git/mpc.vim
"==========================================
" General Settings 基础设置
"==========================================
" 检测文件类型
filetype on
" 针对不同的文件类型采用不同的缩进格式
filetype indent on
" 允许插件
filetype plugin on
" 启用自动补全
filetype plugin indent on

" 文件修改之后自动载入
set autoread
" 启动的时候不显示援助乌干达儿童的提示
set shortmess=atI

" 禁用备份文件
set nobackup
" 禁用交换文件
set noswapfile

" 关闭对vi的兼容
set nocompatible

" 开启语法高亮功能
syntax enable
" 允许用指定语法高亮配色方案替换默认方案
syntax on

" 根据当前窗口的文件切换目录
set autochdir

" 保存 2000 个命令和 2000 个查找模式的历史
set history=2000

" 突出显示当前列
" set cursorcolumn
" 突出显示当前行
set cursorline

" 禁用鼠标
set mouse-=a
" 启用鼠标
" set mouse=a
" 打字时隐藏鼠标指针
" set mousehide

" 选择模式下的设置
set selection=inclusive
set selectmode=mouse,key

" 去掉输入错误的提示音
set novisualbell
set noerrorbells
set vb t_vb=
set tm=500

" 允许指定键跨越行边界
set whichwrap=h,l,b,s,<,>,[,]
" 在插入模式下在哪里允许 <BS> 删除光标前面的字符
set backspace=eol,start,indent

" vim的默认寄存器和系统剪贴板共享
set clipboard+=unnamed

" 切换拷贝模式防止自动缩进和补全
set pastetoggle=<F10>

" 设置alt键不映射到菜单栏
set winaltkeys=no

" 设置leader键
let mapleader=' '
let g:mapleader=' '

"==========================================
" Display Settings 展示 / 排版等界面格式设置
"==========================================
" 显示当前的行号列号
set ruler
" 在状态栏显示正在输入的命令
set showcmd
" 左下角显示当前 vim 模式
set showmode

" 新的窗口出现在当前窗口的下面
set splitbelow
" 垂直分割的窗口出现在当前窗口的右边
" set splitright

" 在上下移动光标时，光标的上方或下方至少会保留显示的行数
set scrolloff=7

" 命令行（在状态行下）的高度，默认为 1，这里是 2
set statusline=%<%f\ %h%m%r%=%k[%{(&fenc==\"\")?&enc:&fenc}%{(&bomb?\",BOM\":\"\")}]\ %-14.(%l,%c%V%)\ %P
" 总是显示状态行
set laststatus=2

" 设置行号
" 显示行号
set number
" 取消换行
set nowrap
" 相对行号:行号变成相对,可以用 nj/nk 进行跳转
set relativenumber number
au FocusLost * :set norelativenumber number
au FocusGained * :set relativenumber
" 插入模式下用绝对行号, 普通模式下用相对
autocmd InsertEnter * :set norelativenumber number
autocmd InsertLeave * :set relativenumber
function! NumberToggle()
    if(&relativenumber == 1)
        set norelativenumber number
    else
        set relativenumber
    endif
endfunc
nnoremap <silent><F1> :call NumberToggle()<cr>

" 括号配对情况,跳转并高亮一下匹配的括号
set showmatch
" 显示配对括号的十分之一秒数
set matchtime=2

" 设置文内智能搜索提示
" 高亮显示所有匹配
set hlsearch
" 打开增量搜索模式,随着键入即时搜索
set incsearch
" 搜索时忽略大小写
set ignorecase
" 有一个或以上大写字母时仍大小写敏感
set smartcase

" 代码折叠
set foldenable
" 折叠方法
" manual    手工折叠
" indent    使用缩进表示折叠
" expr      使用表达式定义折叠
" syntax    使用语法定义折叠
" diff      对没有更改的文本进行折叠
" marker    使用标记进行折叠, 默认标记是 {{{ 和 }}}
set foldmethod=indent
set foldlevel=99
" 代码折叠自定义快捷键 <leader>zz
let g:FoldMethod=0
map <leader>zz :call ToggleFold()<cr>
fun! ToggleFold()
    if g:FoldMethod == 0
        exe "normal! zM"
        let g:FoldMethod = 1
    else
        exe "normal! zR"
        let g:FoldMethod = 0
    endif
endfun
" 保存文件的折叠状态
" au BufWinLeave * silent mkview
" 恢复文件的折叠状态
" au BufRead * silent loadview
" 切换折叠状态
nnoremap <leader><leader> za

" 缩进配置
" 开启新行时，使用智能自动缩进
set smartindent
" 开启新行时，从当前行复制缩进距离
set autoindent

" Tab键相关变更
" 设置Tab键的宽度,等同的空格数
set tabstop=4
" 格式化缩进时制表符对应的空格数
set shiftwidth=4
" 按退格键时可以一次删掉4个空格
set softtabstop=4
" 在行首使用Tab键根据[shiftwidth]的设置值插入空白
set smarttab
" 将 Tab 自动转化成空格[需要输入真正的 Tab 键时,使用 Ctrl+V + Tab]
set expandtab
" 缩进时，取整到[shiftwidth]的倍数
set shiftround

" 让光标停留在中央,固定视觉的重点/编辑区域
" autocmd! CursorMoved * normal zz

"==========================================
" FileEncode Settings 文件编码, 格式
"==========================================
" 设置新文件的字符编码为UTF-8
set encoding=utf-8

" 自动判断编码时,依次尝试以下编码：
set fileencodings=utf-8,gb2312,gb18030,gbk,big5,ucs-bom,cp936,latin1

" 使用中文帮助文档
set helplang=cn

" 设置菜单的语言和编码
set langmenu=zh_CN.UTF-8

" 用于屏幕显示的编码,下面这句只影响普通模式(非图形界面)下的vim
set termencoding=utf-8

" 设置换行方式
" set fileformats=unix,mac,dos

" 如遇Unicode值大于255的文本,不必等到空格再折行
set formatoptions+=m

" 合并两行中文时,不在中间加空格
set formatoptions+=B

"==========================================
" FileType Settings  文件类型设置
"==========================================
" 具体编辑文件类型的一般设置，比如不要 tab 等
autocmd FileType python set tabstop=4 shiftwidth=4 expandtab ai
autocmd FileType ruby,javascript,html,css,xml set tabstop=2 shiftwidth=2 softtabstop=2 expandtab ai
" autocmd BufRead,BufNewFile *.md,*.mkd,*.markdown set filetype=markdown.mkd
" autocmd BufRead,BufNewFile *.part set filetype=html
" autocmd BufRead,BufNewFile *.vue setlocal filetype=vue.html.javascript tabstop=2 shiftwidth=2 softtabstop=2 expandtab ai
" 将 vim 配置文件的折叠方式设置为 marker
autocmd! FileType vim setlocal foldmethod=marker
" 将文本文件长于 78 个字符的行实现自动换行
autocmd! FileType text setlocal textwidth=78
" 开启 .java 文件补全
autocmd! FileType java setlocal omnifunc=javacomplete#Complete
" 关闭 vim 开启新行自动添加注释
autocmd! FileType * set fo-=c fo-=r fo-=o

"==========================================
" Theme Settings  主题设置
"==========================================
" 指定配色方案是256色
set t_Co=256

" 设置主题
" colorscheme gruvbox
colorscheme dracula
" set background=dark

" 禁止光标闪烁
" set gcr=a:block-blinkon0

" 禁止显示滚动条
set guioptions-=l
set guioptions-=L
set guioptions-=r
set guioptions-=R
set guioptions-=b

" 禁止显示菜单和工具条
set guioptions-=m
set guioptions-=T

" 设置字体
set guifont=Monaco:h13

"==========================================
" HotKey Settings  自定义快捷键设置
"==========================================
" 禁用方向键
nmap <up> <nop>
nmap <down> <nop>
nmap <left> <nop>
nmap <right> <nop>

" 物理行和逻辑行
nnoremap k gk
nnoremap gk k
nnoremap j gj
nnoremap gj j

" 全文英文字母变大写
nnoremap sua gggUG
" 当前光标所在词转大写并保持原来的光标位置和插入状态
nnoremap suw gUiwe

" 交换区域内容(先删除区域 A，然后选中区域 B，按快捷键交换 A，B 内容)
" vnoremap <c-s> <esc>`.``gvp``P

" 分屏窗口移动[使用vim-choosewin插件代替]
nnoremap <c-j> <c-w>j
nnoremap <c-k> <c-w>k
nnoremap <c-h> <c-w>h
nnoremap <c-l> <c-w>l
nnoremap <c-w> <c-w>c

" 跳转到光标上次的位置
nnoremap , `"

" 跳转到行首行尾
nmap H ^
nmap L $

" 大写U表示重做，小写u表示撤销
nmap U <c-r>

" Y命令表示复制到行尾，与其他大写命令的行为保持一致
nmap Y y$

" 快速进入命令行
nmap ; :

" 去掉搜索高亮
nnoremap <silent><esc> :nohls<cr>

" 右方增加一个分割窗口
nnoremap <silent><leader>\ :vs<cr>

" 下方增加一个分割窗口
nnoremap <silent><leader>- :sp<cr>

" 连接两行
nnoremap <leader>j J

" 在新窗口中编辑vimrc
nnoremap <silent><leader>v :vs $MYVIMRC<cr>

" 重读vimrc
nnoremap <leader>sv :source $MYVIMRC<cr>:echom"已重新加载配置文件!"<cr>
nnoremap <leader>ss :source %<cr>

" 关闭当前分割窗口
nnoremap <silent><leader>q :q<cr>

" 不作任何保存,关闭所有窗,并退出vim
nnoremap <silent><leader>Q :qa!<cr>

" 保存当前窗口内容
nnoremap <silent><leader>w :w<cr>

" 保存所有窗口内容
nnoremap <silent><leader>W :wa<cr>

" 保存并退出
nnoremap <leader>z :wq<cr>

" 分屏操作
nnoremap <leader>w- :vsplit<cr>
nnoremap <leader>w/ :split<cr>

" 调整分屏窗口大小
nnoremap <leader><leader>j :resize +5<cr>
nnoremap <leader><leader>k :resize -5<cr>
nnoremap <leader><leader>h :vertical resize -5<cr>
nnoremap <leader><leader>l :vertical resize +5<cr>

" 标签页操作
nmap <silent> tn :tabnew<cr>
nmap <silent> tw :tabclose<cr>
nmap <silent> to :tabonly<cr>
nmap <silent> tj :tabnext<cr>
nmap <silent> tk :tabprev<cr>
nmap <silent> th :tabfirst<cr>
nmap <silent> tl :tablast<cr>
nmap <silent> t1 :tabn 1<cr>
nmap <silent> t2 :tabn 2<cr>
nmap <silent> t3 :tabn 3<cr>
nmap <silent> t4 :tabn 4<cr>
nmap <silent> t5 :tabn 5<cr>
nmap <silent> t6 :tabn 6<cr>
nmap <silent> t7 :tabn 7<cr>
nmap <silent> t8 :tabn 8<cr>
nmap <silent> t9 :tabn 9<cr>
nmap <silent> t0 :tablast<cr>

" 插入模式下的keymap
" vim 插入状态下内置快捷键:
" <c-d> 反缩进
" <c-h> 删除光标前的字符
" <c-m> 回车
" <c-o> 进入到正常-插入模式
" <c-t> 缩进
" <c-u> 删除字符到行首(但保留行首的缩进)
" <c-w> 删除到词首
" <c-x> 进入到 <c-x> 子模式
" <c-y> 复制上一行相同位置的字符到本行
inoremap jk <esc>
inoremap <c-a> <home>
inoremap <c-b> <left>
inoremap <c-e> <end>
inoremap <c-f> <right>
inoremap <c-n> <down>
inoremap <c-v> <esc>V
inoremap <c-p> <up>

" 命令行模式下的keymap
" <c-n> 下一条命令, <c-p> 上一条命令
cnoremap <c-n> <t_kd>
cnoremap <c-p> <t_ku>
cnoremap <c-a> <home>
cnoremap <c-e> <end>

"==========================================
" Plugins 插件设置
"==========================================
" 使用vim-plug管理插件
call plug#begin('~/.vim/plugged')
nmap <leader>pc :PlugClean<cr>
nmap <leader>pi :PlugInstall<cr>
nmap <leader>pu :PlugUpdate<cr>
nmap <leader>ps :PlugStatus<cr>

" 使用solarized配色
Plug 'altercation/vim-colors-solarized'
let g:solarized_visibility="high"

" 状态栏
" Plug 'vim-airline/vim-airline'
" let g:airline_powerline_fonts=1

" 状态栏主题
" Plug 'vim-airline/vim-airline-themes'
" let g:airline_theme='solarized'
" let g:airline_solarized_bg='dark'

" 缩进线
" Plug 'Yggdroot/indentLine'
" let g:SignatureMap = {
" \ 'Leader'             :  "m",
" \ 'PlaceNextMark'      :  "m,",
" \ 'ToggleMarkAtLine'   :  "m.",
" \ 'PurgeMarksAtLine'   :  "m-",
" \ 'DeleteMark'         :  "dm",
" \ 'PurgeMarks'         :  "mda",
" \ 'PurgeMarkers'       :  "m<BS>",
" \ 'GotoNextLineAlpha'  :  "']",
" \ 'GotoPrevLineAlpha'  :  "'[",
" \ 'GotoNextSpotAlpha'  :  "`]",
" \ 'GotoPrevSpotAlpha'  :  "`[",
" \ 'GotoNextLineByPos'  :  "]'",
" \ 'GotoPrevLineByPos'  :  "['",
" \ 'GotoNextSpotByPos'  :  "mn",
" \ 'GotoPrevSpotByPos'  :  "mp",
" \ 'GotoNextMarker'     :  "[+",
" \ 'GotoPrevMarker'     :  "[-",
" \ 'GotoNextMarkerAny'  :  "]=",
" \ 'GotoPrevMarkerAny'  :  "[=",
" \ 'ListLocalMarks'     :  "ms",
" \ 'ListLocalMarkers'   :  "m?"
" \ }

" 文件跳转
Plug 'scrooloose/nerdtree'
" Toggle NerdTree
map <silent><F1> :NERDTreeToggle<cr>
" 使用NerdTree浏览当前文件的目录树
nmap <silent><leader>e :NERDTreeFind<cr>
" 显示位置
let g:NERDTreeWinPos='left'
" 忽略以下文件的显示
let NERDTreeIgnore=['\.pyc$', '\~$', 'node_modules', '.idea', '*.pyc']

" Buffer跳转
Plug 'bsdelf/bufferhint'
let g:bufferhint_MaxWidth=50
map <silent><F2> :call bufferhint#Popup()<cr>
nmap \ :call bufferhint#LoadPrevious()<cr>

" 窗口跳转
Plug 't9md/vim-choosewin'
map <silent><F3> <Plug>(choosewin)

" 模糊搜索
Plug 'Yggdroot/LeaderF'
let g:Lf_ShowRelativePath=0
nmap <leader>l :LeaderfLineAll<cr>
nmap <leader>m :LeaderfMru<cr>
let g:Lf_CommandMap={'<c-c>': ['<esc>', '<c-c>']}

" 书签跳转
Plug 'MattesGroeger/vim-bookmarks'
" 跳转后自动关闭书签列表
let g:bookmark_auto_close = 1
" 高亮书签行
let g:bookmark_highlight_lines = 1
" 跳转后书签行置中
let g:bookmark_center = 1
" 书签高亮
highlight link BookmarkLine SpellBad
" 书签高亮
highlight link BookmarkAnnotationLine SpellBad
map <silent><F4> :BookmarkShowAll<cr>

" Vim剪贴板增强
Plug 'vim-scripts/YankRing.vim'
nnoremap <silent><leader>y :YRShow<cr>
" YankRing保留的剪贴版条目数
let g:yankring_max_history=1000
" 过滤单个字符
let g:yankring_min_element_length=2
" YankRing完成粘贴动作后不会自动关闭
let g:yankring_window_auto_close=1
" 替换剪贴板历史的上一个和下一个
let g:yankring_replace_n_pkey = '<F5>'
let g:yankring_replace_n_nkey = '<F6>'

" 极速跳转
Plug 'easymotion/vim-easymotion'
let g:EasyMotion_leader_key='<leader>'
let g:EasyMotion_smartcase=1
let g:EasyMotion_use_smartsign_us=1
let g:EasyMotion_use_upper=1
let g:EasyMotion_keys='ABCDEFGHIJKLMNOPQRSTUVWXYZ;'
let g:EasyMotion_verbose=0
let g:EasyMotion_do_mapping=0
nmap w <Plug>(easymotion-bd-w)
nmap e <Plug>(easymotion-bd-e)
nmap f <Plug>(easymotion-overwin-f)
nmap J <Plug>(easymotion-j)
nmap K <Plug>(easymotion-k)

" 使用easymotion方式进行搜索跳转
Plug 'haya14busa/incsearch.vim'
Plug 'haya14busa/incsearch-easymotion.vim'
nmap / <Plug>(incsearch-easymotion-/)
nmap ? <Plug>(incsearch-easymotion-?)
nmap g/ <Plug>(incsearch-easymotion-stay)

" 平滑滚动
Plug 'terryma/vim-smooth-scroll'
noremap <silent> <c-u> :call smooth_scroll#up(&scroll, 0, 2)<cr>
noremap <silent> <c-d> :call smooth_scroll#down(&scroll, 0, 2)<cr>
noremap <silent> <c-b> :call smooth_scroll#up(&scroll*2-5, 0, 4)<cr>
noremap <silent> <c-f> :call smooth_scroll#down(&scroll*2-5, 0, 4)<cr>

" 查看文档
Plug 'rizzatti/dash.vim'
" 调用Dash查看当前光标下单词的文档
nmap <leader>k :Dash <c-r>=expand("<cword>")<cr> <cr>

" Vim内的Google搜索
Plug 'szw/vim-g'
nmap F :Google<cr>

" 成对符号书写,修改,删除
Plug 'jiangmiao/auto-pairs'

" xml文档标签补全
Plug 'docunext/closetag.vim'
let g:close_html_style=1

" 代码注释
Plug 'scrooloose/nerdcommenter'
" 注释分隔符后面增加一个空格
let g:NERDSpaceDelims=1
let g:NERDCompactSexyComs=1

" 代码对齐、格式化
Plug 'junegunn/vim-easy-align'
vmap <leader>a <plug>(EasyAlign)
vmap <Enter> <Plug>(EasyAlign)
nmap <leader>a <plug>(EasyAlign)

" 尾空格
Plug 'bronson/vim-trailing-whitespace'
nnoremap sw :FixWhitespace<cr>

" 用户可以自定义文本对象
Plug 'kana/vim-textobj-user'

" 添加line文本对象
Plug 'kana/vim-textobj-line'

" 添加indent文本对象
Plug 'kana/vim-textobj-indent'

" 添加entire文本对象
Plug 'kana/vim-textobj-entire'

Plug 'terryma/vim-expand-region'

" 添加surround文本对象,类似[s' s"]
Plug 'tpope/vim-surround'

" 重复操作
Plug 'tpope/vim-repeat'

" Git集成
Plug 'tpope/vim-fugitive'

" Github集成
Plug 'tpope/vim-rhubarb'

" []键成对操作
Plug 'tpope/vim-unimpaired'

" 本地版本控制
Plug 'sjl/gundo.vim'
nmap <silent><leader>u :GundoToggle<cr>

" 多光标编辑
Plug 'terryma/vim-multiple-cursors'
let g:multi_cursor_next_key='<c-n>'
let g:multi_cursor_prev_key='<c-p>'
let g:multi_cursor_skip_key='<c-x>'
let g:multi_cursor_quit_key='<esc>'

" 使用Tab键实现自动补全
Plug 'ervandew/supertab'

" Markdown 关键字高亮
" Plug 'plasticboy/vim-markdown'
let g:vim_markdown_toc_autofit=1

" Markdown即时预览
Plug 'iamcco/markdown-preview.vim'
let g:mkdp_path_to_chrome = "/Applications/Google\\ Chrome.app/Contents/MacOS/Google\\ Chrome"
let g:mkdp_auto_start=1
let g:mkdp_auto_open=1
let g:mkdp_auto_close=1
let g:mkdp_refresh_slow=0
let g:mkdp_command_for_global=0
nnoremap <silent><F8> <Plug>MarkdownPreview
nnoremap <silent><F9> <Plug>StopMarkdownPreview

" 快速创建Markdown表格
Plug 'dhruvasagar/vim-table-mode'
" 开启Markdown表格模式
let g:table_mode_corner='|'

" 标准化中文排版
Plug 'hotoo/pangu.vim'
nmap sz :Pangu<cr>

" 与Tmux集成
Plug 'christoomey/vim-tmux-navigator'

Plug 'Valloric/YouCompleteMe'

call plug#end()


